server:
  port: 8080

spring:
  application:
    name: myblog

  datasource:
    #questi dati sono tra le variabili d'ambiente (modificabili dai tre pallini vicino al debug)
    url: jdbc:mysql://${MySQL_HostName}:${MySQL_Port}/${MySQL_DatabaseName}?ssl-mode=REQUIRED
    username: ${MySQL_Username}
    password: ${MySQL_Password}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    hibernate:
      #ddl-auto -> quando l'app parte interagisce con il DB in diversi modi
      #create-drop: crea il DB all'avvio e lo distrugge all'uscita
      #update: aggiorna il db con le tabelle 'nuove', modifica quelle esistenti, NON elimina eventuali colonne che non esistono più
      #validated: confronta le entità con le tabelle e sollevva eccezioni se ci sono incongruenze
      #none: non viene fatto nulla (da usare assolutamente in produzione)
      ddl-auto: update
    properties:
      dialect: org.hibernate.dialect.MySQLDialect
      hibernate:
        #formatta le query che vediamo in console
        format_sql: true
        use_sql_comments: true
        highlight_sql: true
    show-sql: true
    open-in-view: false

  mail:
    host: smtp.gmail.com
    port: 587
    #solo username
    username: ${CORSO_USER_GMAIL}
    password: ${CORSO_PASSWORD_GMAIL}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            required: true

spring-doc:
  swagger-ui:
    # in produzione dobbiamo mettere false
    enabled: true
    # hostname:port/swagger-ui.html => localhost:8080/swagger-ui.html
    path: /swagger-ui.html

logging:
  level:
    it.cgmconsulting.myblog: info
    org.hibernate.orm.jdbc.bind: trace #questo ci fa vedere anceh valore e tipo dei parametri che passiamo alle query
    org.springframework: info #questo ci fa printare tutto

# CUSTOM PROPERTIES
token:
  signing:
    #key per la creazione del token
    key: f621d0dBa91e2c270c0Ea38v59W996104eA6dm724942c90M

app:
  mail:
    sender: ${CORSO_MAIL_MITTENTE_GMAIL}

#dimenisoni avatar li mettiamo in byte perche il metodo che torna
  #il peso di un file lo torna in byte
  image:
    avatar:
      size: 5120
      height: 100
      width: 100
      extensions: gif, png, jpg, jpeg
    section:
      size: 10240
      height: 500
      width: 500
      extensions: jpg, jpeg
      path: /Users/Public/myblog/Images/